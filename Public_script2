-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

-- Vars
local AutoKillEnabled = true -- always ON
local autoSizeLoop
local serverHopLoop
local LockPosition = CFrame.new(-31.8626, 6.0588, 2087.8867)

-- Functions
local function EquipPunch()
local tool = LocalPlayer.Backpack:FindFirstChild("Punch")
if tool then
LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
end
end

local function DoPunch()
local char = LocalPlayer.Character
if not char then return end
local punch = LocalPlayer.Backpack:FindFirstChild("Punch") or char:FindFirstChild("Punch")
if punch then
if punch:FindFirstChild("attackTime") then
punch.attackTime.Value = 0.001
end
for i = 1, 5 do pcall(function() punch:Activate() end) end
end
end

local function AutoKillLoop(lockPosition)
task.spawn(function()
while AutoKillEnabled do
local char = LocalPlayer.Character
if char and char:FindFirstChild("HumanoidRootPart") then
if lockPosition then
char.HumanoidRootPart.CFrame = lockPosition
end
EquipPunch()
DoPunch()
local rHand = char:FindFirstChild("RightHand")
local lHand = char:FindFirstChild("LeftHand")
if rHand and lHand then
for _, target in ipairs(Players:GetPlayers()) do
if target ~= LocalPlayer and target.Character then
-- âœ… Skip friends
if not pcall(function()
return LocalPlayer:IsFriendsWith(target.UserId)
end) or not LocalPlayer:IsFriendsWith(target.UserId) then
local root = target.Character:FindFirstChild("HumanoidRootPart")
if root then
firetouchinterest(rHand, root, 1)
firetouchinterest(lHand, root, 1)
firetouchinterest(rHand, root, 0)
firetouchinterest(lHand, root, 0)
end
end
end
end
end
end
task.wait(0.01)
end
end)
end

local function StartAutoSizeNaN()
if autoSizeLoop then return end
autoSizeLoop = task.spawn(function()
while AutoKillEnabled do
pcall(function()
ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 0/0)
end)
task.wait()
end
end)
end

local function StopAutoSizeNaN()
if autoSizeLoop then
task.cancel(autoSizeLoop)
autoSizeLoop = nil
end
end

-- Server hop loop
local function StartServerHopLoop()
if serverHopLoop then return end
serverHopLoop = task.spawn(function()
while AutoKillEnabled do
task.wait(60)
pcall(function()
local servers = {}
local cursor = ""
local gameId = 3623096087

repeat  
                local response = game:HttpGet(  
                    "https://games.roblox.com/v1/games/"..gameId.."/servers/Public?sortOrder=Asc&limit=100"..(cursor ~= "" and "&cursor="..cursor or "")  
                )  
                local data = HttpService:JSONDecode(response)  
                for _, server in ipairs(data.data) do  
                    if server.playing >= 15 and server.playing <= 20 and server.id ~= game.JobId then  
                        TeleportService:TeleportToPlaceInstance(gameId, server.id, LocalPlayer)  
                        return  
                    end  
                end  
                cursor = data.nextPageCursor or ""  
            until cursor == "" or not cursor  
        end)  
    end  
end)

end

local function StopServerHopLoop()
if serverHopLoop then
task.cancel(serverHopLoop)
serverHopLoop = nil
end
end

--  Auto start as soon as executed
AutoKillLoop(LockPosition)
StartAutoSizeNaN()
StartServerHopLoop()
